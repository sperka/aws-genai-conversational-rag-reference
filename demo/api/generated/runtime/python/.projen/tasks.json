{
  "tasks": {
    "build": {
      "name": "build",
      "description": "Full release build",
      "steps": [
        {
          "spawn": "pre-compile"
        },
        {
          "spawn": "compile"
        },
        {
          "spawn": "post-compile"
        },
        {
          "spawn": "test"
        },
        {
          "spawn": "package"
        }
      ]
    },
    "compile": {
      "name": "compile",
      "description": "Only compile"
    },
    "create-openapitools.json": {
      "name": "create-openapitools.json",
      "steps": [
        {
          "exec": "cp -f .pdk/dynamic-files/openapitools.json openapitools.json"
        }
      ]
    },
    "default": {
      "name": "default",
      "description": "Synthesize project files"
    },
    "generate": {
      "name": "generate",
      "steps": [
        {
          "spawn": "create-openapitools.json"
        },
        {
          "exec": "npx --yes -p @aws/pdk@$AWS_PDK_VERSION type-safe-api.clean-openapi-generated-code --code-path ."
        },
        {
          "exec": "npx --yes -p @aws/pdk@$AWS_PDK_VERSION type-safe-api.generate --generator python --spec-path ../../../model/.api.json --output-path . --generator-dir python --src-dir api_python_runtime --tst-dir test --additional-properties \"packageName=api_python_runtime,projectName=api-python-runtime\" --openapi-normalizer \"KEEP_ONLY_FIRST_TAG_IN_OPERATION=true\" --generate-alias-as-model"
        }
      ]
    },
    "install": {
      "name": "install",
      "description": "Install dependencies and update lockfile",
      "env": {
        "PYTHON_VERSION": "$(pyenv latest 3 | cut -d '.' -f 1,2 || echo '')"
      },
      "steps": [
        {
          "exec": "poetry env use python$PYTHON_VERSION"
        },
        {
          "exec": "mkdir -p api_python_runtime && touch api_python_runtime/__init__.py"
        },
        {
          "exec": "poetry update"
        }
      ]
    },
    "install:ci": {
      "name": "install:ci",
      "description": "Install dependencies with frozen lockfile",
      "env": {
        "PYTHON_VERSION": "$(pyenv latest 3 | cut -d '.' -f 1,2 || echo '')"
      },
      "steps": [
        {
          "exec": "poetry env use python$PYTHON_VERSION"
        },
        {
          "exec": "mkdir -p api_python_runtime && touch api_python_runtime/__init__.py"
        },
        {
          "exec": "poetry check --lock && poetry install"
        }
      ]
    },
    "package": {
      "name": "package",
      "description": "Creates the distribution package",
      "steps": [
        {
          "exec": "poetry build"
        }
      ]
    },
    "post-compile": {
      "name": "post-compile",
      "description": "Runs after successful compilation"
    },
    "pre-compile": {
      "name": "pre-compile",
      "description": "Prepare the project for compilation",
      "steps": [
        {
          "spawn": "generate"
        }
      ]
    },
    "publish": {
      "name": "publish",
      "description": "Uploads the package to PyPI.",
      "steps": [
        {
          "exec": "poetry publish"
        }
      ]
    },
    "publish:test": {
      "name": "publish:test",
      "description": "Uploads the package against a test PyPI endpoint.",
      "steps": [
        {
          "exec": "poetry publish -r testpypi"
        }
      ]
    },
    "test": {
      "name": "test",
      "description": "Run tests"
    }
  },
  "env": {
    "VIRTUAL_ENV": "$(env -u VIRTUAL_ENV poetry env info -p || echo '')",
    "PATH": "$(echo $(env -u VIRTUAL_ENV poetry env info -p || echo '')/bin:$PATH)",
    "AWS_PDK_VERSION": "0.23.33",
    "NODE_NO_WARNINGS": "1"
  },
  "//": "~~ Generated by projen. To modify, edit .projenrc.js and run \"npx projen\"."
}
